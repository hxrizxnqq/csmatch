const ngrok = require('ngrok');
const fs = require('fs');
const path = require('path');

class NgrokManager {
  constructor() {
    this.url = null;
    this.isConnected = false;
  }

  async start(port = 3000) {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º ngrok —Ç—É–Ω–Ω–µ–ª—å...');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º ngrok —Ç—É–Ω–Ω–µ–ª—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
      this.url = await ngrok.connect({
        proto: 'http',
        addr: port,
        region: 'eu',
        onStatusChange: status => {
          console.log(`üìä Ngrok —Å—Ç–∞—Ç—É—Å: ${status}`);
        },
        onLogEvent: data => {
          if (data.level === 'ERROR') {
            console.error(`‚ùå Ngrok –æ—à–∏–±–∫–∞: ${data.msg}`);
          }
        },
      });

      this.isConnected = true;
      
      console.log(`‚úÖ Ngrok —Ç—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${this.url}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º URL
      await this.updateEnvFile();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
      process.env.BASE_URL = this.url;
      
      return this.url;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ngrok:', error.message);
      console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ngrok –≥–ª–æ–±–∞–ª—å–Ω–æ: npm install -g ngrok');
      
      // –í –∫–∞—á–µ—Å—Ç–≤–µ fallback –∏—Å–ø–æ–ª—å–∑—É–µ–º localtunnel
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback —Ä–µ—à–µ–Ω–∏–µ...');
      return await this.startFallback(port);
    }
  }

  async startFallback(port) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –±–µ–∑ —Ç—É–Ω–Ω–µ–ª—è –∫–∞–∫ fallback
      const fallbackUrl = `http://localhost:${port}`;
      console.log(`‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URL: ${fallbackUrl}`);
      console.log('üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram webhook –≤–∞–º –Ω—É–∂–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π URL');
      
      this.url = fallbackUrl;
      this.isConnected = true;
      
      await this.updateEnvFile();
      process.env.BASE_URL = this.url;
      
      return this.url;
    } catch (error) {
      console.error('‚ùå Fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
      throw error;
    }
  }

  async updateEnvFile() {
    try {
      const envPath = path.join(process.cwd(), '.env');
      let envContent = fs.readFileSync(envPath, 'utf8');
      
      // –ó–∞–º–µ–Ω—è–µ–º BASE_URL –Ω–∞ –Ω–æ–≤—ã–π ngrok URL
      const baseUrlRegex = /^BASE_URL=.*$/m;
      
      if (baseUrlRegex.test(envContent)) {
        envContent = envContent.replace(baseUrlRegex, `BASE_URL=${this.url}`);
      } else {
        // –ï—Å–ª–∏ BASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        envContent += `\nBASE_URL=${this.url}`;
      }
      
      fs.writeFileSync(envPath, envContent);
      console.log('üìù –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º URL');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞:', error.message);
    }
  }

  async stop() {
    if (this.isConnected) {
      try {
        await ngrok.kill();
        this.isConnected = false;
        this.url = null;
        console.log('‚èπÔ∏è  Ngrok —Ç—É–Ω–Ω–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ ngrok:', error.message);
      }
    }
  }

  async restart(port = 3000) {
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º ngrok —Ç—É–Ω–Ω–µ–ª—å...');
    await this.stop();
    await new Promise(resolve => setTimeout(resolve, 2000)); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É
    return await this.start(port);
  }

  getUrl() {
    return this.url;
  }

  isRunning() {
    return this.isConnected;
  }
}

module.exports = new NgrokManager();
